/*
 * Авторское право принадлежит Антону Александровичу Астафьеву <anton@astafiev.me> (Anton Astafiev) ѱ.
 * Все права защищены и охраняются законом.
 * Copyright (c) 2018 Антон Александрович Астафьев <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 * 
 *  Собственная лицензия Астафьева
 * Данный программный код является собственностью Астафьева Антона Александровича
 * и может быть использован только с его личного разрешения
 */
package net.elliptica.plot;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;
import net.elliptica.svg.DbRecordsParser;
import net.elliptica.svg.Word;

/**
 *
 * @author Антон Астафьев <anton@astafiev.me> (Anton Astafiev)
 */
public class MorphemsFrame extends javax.swing.JFrame {

	/**
	 * Creates new form MorphemsFrame
	 */
	public MorphemsFrame() {
		initComponents();
		plot = (GrafCanvas) plot_;
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        plot_ = new GrafCanvas(this);
        toolBar = new javax.swing.JToolBar();
        commitButton = new javax.swing.JButton();
        abortButton = new javax.swing.JButton();
        flushButton = new javax.swing.JButton();
        pagesButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        moveButton = new javax.swing.JToggleButton();
        linkButton = new javax.swing.JToggleButton();
        groupButton = new javax.swing.JButton();
        delinkButton = new javax.swing.JToggleButton();
        destroyButton = new javax.swing.JButton();
        separator = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        pageSelector = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(550, 300));
        setPreferredSize(new java.awt.Dimension(550, 300));

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 150));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        plot_.setMinimumSize(new java.awt.Dimension(200, 150));

        javax.swing.GroupLayout plot_Layout = new javax.swing.GroupLayout(plot_);
        plot_.setLayout(plot_Layout);
        plot_Layout.setHorizontalGroup(
            plot_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 690, Short.MAX_VALUE)
        );
        plot_Layout.setVerticalGroup(
            plot_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        jPanel1.add(plot_);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        toolBar.setRollover(true);

        commitButton.setText("Сохранить");
        commitButton.setEnabled(false);
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });
        toolBar.add(commitButton);

        abortButton.setText("Отменить");
        abortButton.setEnabled(false);
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });
        toolBar.add(abortButton);

        flushButton.setText("Сброс кэша");
        flushButton.setFocusable(false);
        flushButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flushButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flushButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flushButtonActionPerformed(evt);
            }
        });
        toolBar.add(flushButton);

        pagesButton.setText("Список");
        pagesButton.setFocusable(false);
        pagesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pagesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagesButtonActionPerformed(evt);
            }
        });
        toolBar.add(pagesButton);

        getContentPane().add(toolBar, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        moveButton.setText("Перенести");
        moveButton.setEnabled(false);
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(moveButton, gridBagConstraints);

        linkButton.setText("Связать");
        linkButton.setEnabled(false);
        linkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(linkButton, gridBagConstraints);

        groupButton.setText("В группу");
        groupButton.setEnabled(false);
        groupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupButtonActionPerformed(evt);
            }
        });
        jPanel2.add(groupButton, new java.awt.GridBagConstraints());

        delinkButton.setText("Отвязать");
        delinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delinkButtonActionPerformed(evt);
            }
        });
        jPanel2.add(delinkButton, new java.awt.GridBagConstraints());

        destroyButton.setText("Удалить");
        destroyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destroyButtonActionPerformed(evt);
            }
        });
        jPanel2.add(destroyButton, new java.awt.GridBagConstraints());

        separator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        separator.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(separator, new java.awt.GridBagConstraints());

        jLabel1.setText("Страница: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        pageSelector.setMinimumSize(new java.awt.Dimension(70, 22));
        pageSelector.setPreferredSize(new java.awt.Dimension(70, 22));
        pageSelector.setValue(31);
        pageSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pageSelectorStateChanged(evt);
            }
        });
        pageSelector.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pageSelectorPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 0, 0);
        jPanel2.add(pageSelector, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pageSelectorPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pageSelectorPropertyChange
		if ("enabled".equals(evt.getPropertyName())){
			return;
		}
		onNewPageValue(evt.getSource());
    }//GEN-LAST:event_pageSelectorPropertyChange

    private void pageSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pageSelectorStateChanged
		onNewPageValue(evt.getSource());
    }//GEN-LAST:event_pageSelectorStateChanged

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        if (!plot.hasSelection()) {
			moveButton.setSelected(false);
		}
		plot.setOperationMode(GrafCanvas.OPERATION_MODE.MOVE);
    }//GEN-LAST:event_moveButtonActionPerformed

    private void linkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkButtonActionPerformed
        if (!plot.hasSelection()) {
			linkButton.setSelected(false);
		}
		plot.setOperationMode(GrafCanvas.OPERATION_MODE.LINKAGE);
    }//GEN-LAST:event_linkButtonActionPerformed

    private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
        plot.finishOperation(true);
		onSelected(false);
		onSelected(true);
		disableTransaction();
		resetOperation();
    }//GEN-LAST:event_commitButtonActionPerformed

    private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
        plot.finishOperation(false);
		onSelected(false);
		onSelected(true);
		disableTransaction();
		resetOperation();
    }//GEN-LAST:event_abortButtonActionPerformed

    private void groupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupButtonActionPerformed
        if (!plot.hasSelection()) {
			groupButton.setSelected(false);
		}
		plot.setOperationMode(GrafCanvas.OPERATION_MODE.GROUP);
    }//GEN-LAST:event_groupButtonActionPerformed

    private void flushButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flushButtonActionPerformed
        plot.flushDB();
    }//GEN-LAST:event_flushButtonActionPerformed

    private void delinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delinkButtonActionPerformed
        if (!plot.hasSelection()) {
			delinkButton.setSelected(false);
		}
		plot.setOperationMode(GrafCanvas.OPERATION_MODE.DELINK);
    }//GEN-LAST:event_delinkButtonActionPerformed

    private void pagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagesButtonActionPerformed
        if (pages==null || pages.isEmpty()) {
			String input = JOptionPane.showInputDialog(null, "Введите список страниц к просмотру");
			if (input != null) {
				pages = new ArrayList<>();
				for (String pstr: input.split(" ")) {
					pages.add(Integer.valueOf(pstr.trim()));
				}
			} else {
				return;
			}
		}
		int next = pages.remove(0);
		plot.setPage(next);
		pageSelector.setValue(next);
    }//GEN-LAST:event_pagesButtonActionPerformed

    private void destroyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destroyButtonActionPerformed
		plot.setOperationMode(GrafCanvas.OPERATION_MODE.DESTROY);
    }//GEN-LAST:event_destroyButtonActionPerformed

	void onSelected(boolean has) {
		moveButton.setEnabled(has);
		linkButton.setEnabled(has);
		groupButton.setEnabled(has);
		if (!has) {
			moveButton.setSelected(has);
			linkButton.setSelected(has);
			groupButton.setSelected(has);
		}
	}
	
	private void disableTransaction() {
		commitButton.setEnabled(false);
		abortButton.setEnabled(false);
	}

	void enableAbort() {
		abortButton.setEnabled(true);
	}

	void resetOperation() {
		onSelected(false);
		onSelected(true);
	}

	void onConfirmRequest() {
		moveButton.setEnabled(false);
		linkButton.setEnabled(false);
		commitButton.setEnabled(true);
		abortButton.setEnabled(true);
	}

	private void onNewPageValue(Object source) {
		JSpinner spinner = (JSpinner)source;
        Object val = spinner.getValue();
		guiWork(()->spinner.setEnabled(false));
		guiWork(()->spinner.setEnabled(true));
		if (plot==null){
			return;
		}
		plot.setPage((int) val);
		plot.revalidate();
		plot.repaint();
	}

	private void guiWork(Runnable task) {
		SwingUtilities.invokeLater(task);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MorphemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MorphemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MorphemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MorphemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MorphemsFrame().setVisible(true);
			}
		});
	}

	GrafCanvas plot;
	private List<Integer> pages;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JButton commitButton;
    private javax.swing.JToggleButton delinkButton;
    private javax.swing.JButton destroyButton;
    private javax.swing.JButton flushButton;
    private javax.swing.JButton groupButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToggleButton linkButton;
    private javax.swing.JToggleButton moveButton;
    private javax.swing.JSpinner pageSelector;
    private javax.swing.JButton pagesButton;
    private javax.swing.JPanel plot_;
    private javax.swing.JSeparator separator;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
