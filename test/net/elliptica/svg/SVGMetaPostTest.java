/*
 * –ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ê–Ω—Ç–æ–Ω—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á—É –ê—Å—Ç–∞—Ñ—å–µ–≤—É <anton@astafiev.me> (Anton Astafiev) —±.
 * –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã –∏ –æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∑–∞–∫–æ–Ω–æ–º.
 * Copyright (c) 2017 –ê–Ω—Ç–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ê—Å—Ç–∞—Ñ—å–µ–≤ <anton@astafiev.me> (Anton Astafiev). All rights reserved.
 * 
 *  –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –ê—Å—Ç–∞—Ñ—å–µ–≤–∞
 * –î–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –ê—Å—Ç–∞—Ñ—å–µ–≤–∞ –ê–Ω—Ç–æ–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á–∞
 * –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ —Å –µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 */
package net.elliptica.svg;

import java.io.File;
import java.io.IOException;
import java.util.Set;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.w3c.dom.Document;

/**
 *
 * @author –ê–Ω—Ç–æ–Ω –ê—Å—Ç–∞—Ñ—å–µ–≤ <anton@astafiev.me> (Anton Astafiev)
 */
public class SVGMetaPostTest {
	
	public SVGMetaPostTest() {
	}
	
	@BeforeClass
	public static void setUpClass() throws IOException {
		String pdfFile = "/mnt/store/data/Texts/–°–ª–æ–≤–∞—Ä–∏/work/–¢–∏—Ö–æ–Ω–æ–≤.pdf";
		document = PDDocument.load( new File(pdfFile) );
		engine = new MorphemStreamEngine(null);
	}

	@Test
	public void testParsePage() throws Exception {
		System.out.println("parsePage");
		int pageInd = 32;
		SVGMetaPost.parsePage(document, pageInd, engine);
		Set<WGroup> groups = engine.pageGroups.get(pageInd);
		assertNotNull(groups);
		int[] exp_sizes = {
			11,	//glob
			0, // ->
			3,	//–∞–≤–∞—Ä–∏–π—â–∏–∫ /2
			1,//–∞–≤—Ä-—Ç—å
			0, // ->
			2, // –±–µ–∑–∞–≤–∞—Ä
			1, // –∞–≤–≥-—Å–∫–∏–π /6
			2, // –∞–≤–∏—Ç–∞—Ç–æ—Ä
			1, // –∞–≤–∏—Ç-—Å–∫–∏–π / 8
			0, // ->
			9,	//–∞–≤–∏–∞/–±–∞¬¥–∑–∞ /10
			0,	// ->
			1,	//–∞–≤–∏–∞–ø–æ—á—Ç-–æ¬¥–≤-—ã–π
			0,	// ->
			1,	//–∞–≤–∏–∞—Å–ø–æ—Ä—Ç-—Å–º–µ¬¥–Ω /14
			0,	// ->
			2,	//–∞–≤—Ç–æ¬¥–±—É—Å-–Ω-—ã–π /16
			0,	// ->
			3,	//–∞–≤—Ç–æ–≥—Ä–∞¬¥—Ñ([-–∏j-a] /18
			1,	//–∞–≤—Ç–æ–≥—Ä–∞—Ñ-–∏¬¥—á–µ—Å–∫-–∏–π¬π
			0,	// -> /20
			8,	// –∞–≤—Ç–æ–º–∞—Ç—á–∏–∫ /21
			0,	// ->
			2,	// –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ /23
			1,	//–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ /24
			0,	// ->
			3,	// –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è /26
			5,	// –∞–≤—Ç–æ–º–æ–±–∏–ª—å—á–∏–∫, –∞–≤—Ç–æ–º–æ–±–∏¬¥–ª—å-–Ω(—ã–π)
			1,	//–∞–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç-–∫-–∞ /28
			4,	// –∞–≤—Ç–æ/–≥–æ–Ω(–∫–∞) /29
			0,	// ->
			1,	//–∞–≤—Ç–æ–≥–æ–Ω—â–∏–∫ /31
			0,	// ->
			0, 0,
			1,	// –∞–≤—Ç–æ–¥–æ—Ä–æ–∂–Ω—ã–π /33
		};
		int[] act_sizes = groups.stream().mapToInt(wg -> wg.words.size()).toArray();
		assertArrayEquals(exp_sizes, act_sizes);
		for (WGroup group: groups){
			assertTrue("Inconsistent group " + group.toString(), group.words.size()>1 || group.getGroupLine().rowSym);
		}
	}

	static PDDocument document;
	static MorphemStreamEngine engine;
}
